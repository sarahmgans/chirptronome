{"version":3,"sources":["chirp1.wav","chirp2.mp3","firebase.js","Log.js","Header.js","Byline.js","Button.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Log","props","deleteItem","database","ref","logId","remove","onClick","onKeyDown","className","logTitle","logComp","cpm","logMeter","Header","aria-label","role","Byline","Button","startAndStop","playing","Form","action","onSubmit","handleSubmit","type","min","max","value","userNumberInput","id","onChange","handleChange","name","checked","chirpsPerMeasure","handleMeterInput","for","placeholder","userInput","handleUserInput","userCompInput","handleCompInput","App","e","preventDefault","state","userDate","dbRef","toSave","title","composer","tempo","meter","push","setState","swal","text","icon","button","event","target","chirp","count","chirp2","play","chirp1","clearInterval","timer","setInterval","logs","Audio","on","result","data","val","logsArray","key","logName","console","log","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.407d5bb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chirp1.f93aa548.wav\";","module.exports = __webpack_public_path__ + \"static/media/chirp2.4757f7bf.mp3\";","import firebase from 'firebase/app'\nimport 'firebase/database'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAQvM7s0oSwsITm9vlEVDHh6iy8LFYBSq8\",\n  authDomain: \"chirptronome.firebaseapp.com\",\n  databaseURL: \"https://chirptronome.firebaseio.com\",\n  projectId: \"chirptronome\",\n  storageBucket: \"chirptronome.appspot.com\",\n  messagingSenderId: \"453587769966\",\n  appId: \"1:453587769966:web:96f859d9f1bd66f43be47f\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase","import React from \"react\";\nimport firebase from \"./firebase\";\n\nfunction Log(props) {\n\n  const deleteItem = () => {\n    // console.log(props.logId);\n    const itemRef = firebase.database().ref(props.logId);\n    itemRef.remove();\n  };\n\n  return (\n    <li onClick={deleteItem} onKeyDown={deleteItem}>\n      <p>\n        <span className=\"bold\">Title:</span> {props.logTitle}\n      </p>\n      <p>\n        <span className=\"bold\">Composer:</span> {props.logComp}\n      </p>\n      <p>\n        <span className=\"bold\">Tempo:</span> {props.cpm} Chirps per Minute\n      </p>\n      <p>\n        <span className=\"bold\">Meter:</span> {props.logMeter}/4\n      </p>\n      <span className=\"x\">‚òí</span>\n    </li>\n  );\n}\n\nexport default Log;\n","import React from 'react'\n\nfunction Header () {\n    return (\n      <header>\n        <h1>\n          <span aria-label=\"chick\" role=\"img\">üê• </span> Chirp-tronome\n          <span aria-label=\"chick\" role=\"img\"> üê•</span>\n        </h1>\n        <p>\n          Why play with a <span>click</span> when you can play with a <span>chick?</span>\n        </p>\n      </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nfunction Byline(props) {\n  return (\n    <p className=\"chirps\"><span>{props.cpm}</span> Chirps per Minute</p>\n  )\n}\n\nexport default Byline;","import React from 'react';\n\nfunction Button(props) {\n  return (\n<button className=\"playing\" onClick={props.startAndStop}>\n  {props.playing ? 'Stop' : 'Play'}\n</button>\n  )\n}\n\nexport default Button;","import React from 'react'\n\nfunction Form (props) {\n  return (\n    <form action=\"\" onSubmit={props.handleSubmit}>\n      <div className=\"parent\">\n        <input\n          className=\"slider\"\n          type=\"range\"\n          min=\"20\"\n          max=\"260\"\n          value={props.userNumberInput}\n          id=\"userLog\"\n          onChange={props.handleChange}\n        />\n      </div>\n      <fieldset className=\"radio\">\n        <input\n          type=\"radio\"\n          name=\"meter\"\n          value=\"6\"\n          checked={props.chirpsPerMeasure === \"6\"}\n          id=\"6/4\"\n          onChange={props.handleMeterInput}\n        />\n        <label for=\"6/4\" className=\"6/4\">\n          6/4\n        </label>\n\n        <input\n          type=\"radio\"\n          name=\"meter\"\n          value=\"5\"\n          checked={props.chirpsPerMeasure === \"5\"}\n          id=\"5/4\"\n          onChange={props.handleMeterInput}\n        />\n        <label for=\"5/4\" className=\"5/4\">\n          5/4\n        </label>\n\n        <input\n          type=\"radio\"\n          name=\"meter\"\n          value=\"4\"\n          checked={props.chirpsPerMeasure === \"4\"}\n          id=\"4/4\"\n          onChange={props.handleMeterInput}\n        />\n        <label for=\"4/4\" className=\"4/4\">\n          4/4\n        </label>\n\n        <input\n          type=\"radio\"\n          name=\"meter\"\n          value=\"3\"\n          checked={props.chirpsPerMeasure === \"3\"}\n          id=\"3/4\"\n          onChange={props.handleMeterInput}\n        />\n        <label for=\"3/4\" className=\"3/4\">\n          3/4\n        </label>\n\n        <input\n          type=\"radio\"\n          name=\"meter\"\n          value=\"2\"\n          checked={props.chirpsPerMeasure === \"2\"}\n          id=\"2/4\"\n          onChange={props.handleMeterInput}\n        />\n        <label for=\"2/4\" className=\"2/4\">\n          2/4\n        </label>\n\n        <input\n          type=\"radio\"\n          name=\"meter\"\n          value=\"1\"\n          checked={props.chirpsPerMeasure === \"1\"}\n          id=\"noMeter\"\n          onChange={props.handleMeterInput}\n        />\n        <label for=\"noMeter\" className=\"1/4\">\n          1/4\n        </label>\n      </fieldset>\n      <div className=\"parent\">\n        <p>\n          What{\" \"}\n          <span aria-label=\"music\" className=\"musicNotes\" role=\"img\">\n            {\" \"}\n            üé∂{\" \"}\n          </span>{\" \"}\n          are you playing?\n        </p>\n        <input\n          className=\"piece\"\n          type=\"text\"\n          placeholder=\"Title:\"\n          name=\"piece\"\n          value={props.userInput}\n          id=\"userLog\"\n          onChange={props.handleUserInput}\n        />\n        <input\n          className=\"composer\"\n          type=\"text\"\n          placeholder=\"Composer:\"\n          name=\"composer\"\n          value={props.userCompInput}\n          id=\"userComp\"\n          onChange={props.handleCompInput}\n        />\n      </div>\n      <button type=\"submit\">Store</button>\n    </form>\n  );\n}\n\nexport default Form;","import React, {Component} from 'react';\nimport './App.css';\nimport swal from \"sweetalert\";\n\nimport firebase from './firebase';\n\nimport Log from './Log'\nimport Header from './Header';\nimport Byline from './Byline';\nimport Button from './Button';\nimport Form from './Form';\n\nimport chirp1 from './chirp1.wav';\nimport chirp2 from './chirp2.mp3';\n\nclass App extends Component {\n  constructor(){\n    super();\n    // The state is initialized so that the playing begins at false, the count at 0, the chirps per minute at 80, the chirps per measure at 4, the logs an empty array and the text inputs empty strings.  \n    this.state = {\n      playing: false,\n      count: 0,\n      logs: [],\n      userInput: '',\n      userCompInput: '',\n      userNumberInput: \"80\",\n      chirpsPerMeasure: \"4\"\n    }\n\n    // Audio files of bird sounds\n    this.chirp1 = new Audio(chirp1);\n    this.chirp2 = new Audio(chirp2);\n  }\n\n  // grab the list of logs from our database\n  componentDidMount() {\n    // set up a listener to firebase\n    const dbRef = firebase.database().ref();\n    // taking info out of firebase to put on page\n    dbRef.on('value', (result) => {\n      const data = result.val();\n      // turn data from an object into an array\n      const logsArray = []\n      for(let key in data){\n        // logName is the object that contains tempo and title\n        logsArray.push({logId: key, logName: data[key]})\n        console.log(data[key]);\n      }\n      this.setState({\n        logs: logsArray\n      })\n    })\n  }\n\n  handleSubmit = (e) => {\n    // putting info into firebase\n    e.preventDefault()\n    if (this.state.userInput !=='' && this.state.userCompInput !=='' && this.state.userDate !== ''){\n      const dbRef = firebase.database().ref()\n      // object that will be in firebase\n      const toSave = {\n        title: this.state.userInput,\n        composer: this.state.userCompInput,\n        tempo: this.state.userNumberInput,\n        meter: this.state.chirpsPerMeasure\n      }\n\n      dbRef.push(toSave)\n      \n      // Clears the two text inputs on store while maintaining the tempo and the meter.\n      this.setState({\n        userInput:'',\n        userCompInput: ''\n      })\n\n    } else {\n      swal({\n        title: \"Error!\",\n        text: \"Please fill out all of the inputs\",\n        icon: \"error\",\n        button: true\n      });\n    }\n  }\n\n  handleUserInput = (event) => {\n    // take event.target.value (user's chosen values) and put them into the setState.[].\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n\n  handleCompInput = (event) => {\n    this.setState({\n      userCompInput: event.target.value\n    })\n  }\n\n  handleMeterInput = (event) => {\n    this.setState({\n      chirpsPerMeasure: event.target.value\n    })\n  }\n\n  chirp = () => {\n    // If the metronome is on the downbeat of the four-beat pattern that is set in the state, chirp2 will play.\n    if (this.state.count % this.state.chirpsPerMeasure === 0) {\n      this.chirp2.play();\n    } else {\n      this.chirp1.play();\n    }\n\n    // The setState method allows the count to increase by one by passing in an object with the key of count and setting it to count plus one. It also keeps track of which beat in each 4/4 measure we are on by using the modulo operator and the chirpsPerMeasure. \n    this.setState(state => ({\n      count: (state.count + 1) % state.chirpsPerMeasure\n    }));\n  }\n\n  startAndStop = () => {\n    // If the chirptronome is playing and you want it to stop, press the Stop button. This will stop it from playing by clearing the interval (timer) and setting the playing value to false. The Stop button will change back to a Start button (as directed by the ternary operator in the button element). \n    if (this.state.playing) {\n      clearInterval(this.timer);\n      this.setState({\n        playing: false\n      });\n      // However, if it is not already playing, a timer is set that takes the number 60, divides it by the cpm chosen by the user, and multiplies it by 1 second. \n    } else {\n      this.timer = setInterval(this.chirp, (60 / this.state.userNumberInput) * 1000);\n      this.setState({\n        count: 0,\n        playing: true\n        // This second argument is used so that a chirp is played as soon as the button is clicked and does not wait for setState. \n      }, this.chirp);\n    }\n  }\n\n  // Allow the user to adjust the cpm through the range input.\n  handleChange = event => {\n    const cpm = event.target.value\n\n    // If the metronome is already playing and the user changes the cpm through the range input, the timer has to be cleared and this.timer has to be re-calculated.\n    if (this.state.playing) {\n      clearInterval(this.timer);\n      this.timer = setInterval(this.chirp, (60 / cpm) * 1000);\n\n      // After the new cpm is set by the user, the beat count is also reset to 0 so that the first of every four chirps is recognized as the down beat of the beatPerMeasure. \n      this.setState({\n        count: 0,\n        userNumberInput: cpm\n      });\n\n      // However, if the metronome is not already playing, the cpm is just updated through the setState. \n    } else {\n        this.setState({ userNumberInput: cpm });\n    }\n  }\n  render(){\n    const { playing, userNumberInput } = this.state;\n\n    return (\n      <div className=\"chirptronome\">\n        <div className=\"data\">\n          <Header />\n          <main>\n            <Byline cpm={userNumberInput} />\n            <Form \n              handleSubmit={this.handleSubmit}\n              userNumberInput={this.state.userNumberInput}\n              handleChange={this.handleChange}\n              userInput={this.state.userInput}\n              handleUserInput={this.handleUserInput}\n              userCompInput={this.state.userCompInput}\n              handleCompInput={this.handleCompInput}\n              chirpsPerMeasure={this.state.chirpsPerMeasure}\n              handleMeterInput={this.handleMeterInput}\n            />\n            <Button playing={playing} startAndStop={this.startAndStop} />\n            <ul>\n              {this.state.logs.map((log) => {\n                return (\n                  <Log\n                    key={log.logId}\n                    logId={log.logId}\n                    logTitle={log.logName.title}\n                    cpm={log.logName.tempo}\n                    logComp={log.logName.composer}\n                    logMeter={log.logName.meter}\n                  />\n                );\n              })}\n            </ul>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}